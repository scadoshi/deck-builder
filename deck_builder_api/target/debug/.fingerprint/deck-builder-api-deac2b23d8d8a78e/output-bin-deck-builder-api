{"$message_type":"diagnostic","message":"cannot find derive macro `DbEnum` in this scope","code":null,"level":"error","spans":[{"file_name":"src/models/types.rs","byte_start":256,"byte_end":262,"line_start":10,"line_end":10,"column_start":59,"column_end":65,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, DbEnum)]","highlight_start":59,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find derive macro `DbEnum` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/types.rs:10:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, DbEnum)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `ExistingTypePath` in this scope","code":null,"level":"error","spans":[{"file_name":"src/models/types.rs","byte_start":267,"byte_end":283,"line_start":11,"line_end":11,"column_start":3,"column_end":19,"is_primary":true,"text":[{"text":"#[ExistingTypePath = \"crate::schema::sql_types::MtgFormat\"]","highlight_start":3,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `ExistingTypePath` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/types.rs:11:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[ExistingTypePath = \"crate::schema::sql_types::MtgFormat\"]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `deck_cards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/deck_card.rs","byte_start":251,"byte_end":261,"line_start":9,"line_end":9,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"#[diesel(table_name  = deck_cards)]","highlight_start":24,"highlight_end":34}],"label":"use of unresolved module or unlinked crate `deck_cards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing this struct through its public re-export","code":null,"level":"help","spans":[{"file_name":"src/models/deck_card.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use chrono::NaiveDateTime;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::schema::deck_cards::dsl::deck_cards;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck_card.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name  = deck_cards)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::schema::deck_cards::dsl::deck_cards;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `deck_cards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/deck_card.rs","byte_start":716,"byte_end":726,"line_start":24,"line_end":24,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"#[diesel(table_name  = deck_cards)]","highlight_start":24,"highlight_end":34}],"label":"use of unresolved module or unlinked crate `deck_cards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing this struct through its public re-export","code":null,"level":"help","spans":[{"file_name":"src/models/deck_card.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use chrono::NaiveDateTime;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::schema::deck_cards::dsl::deck_cards;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck_card.rs:24:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name  = deck_cards)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::schema::deck_cards::dsl::deck_cards;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `deck_cards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models/deck_card.rs","byte_start":990,"byte_end":1000,"line_start":34,"line_end":34,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"#[diesel(table_name  = deck_cards)]","highlight_start":24,"highlight_end":34}],"label":"use of unresolved module or unlinked crate `deck_cards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing this struct through its public re-export","code":null,"level":"help","spans":[{"file_name":"src/models/deck_card.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use chrono::NaiveDateTime;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::schema::deck_cards::dsl::deck_cards;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck_card.rs:34:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name  = deck_cards)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `deck_cards`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `deck_cards`, use `cargo add deck_cards` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::schema::deck_cards::dsl::deck_cards;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `user::User`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/deck.rs","byte_start":127,"byte_end":137,"line_start":5,"line_end":5,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"use crate::models::{types::MtgFormat, user::User};","highlight_start":39,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/models/deck.rs","byte_start":125,"byte_end":137,"line_start":5,"line_end":5,"column_start":37,"column_end":49,"is_primary":true,"text":[{"text":"use crate::models::{types::MtgFormat, user::User};","highlight_start":37,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/models/deck.rs","byte_start":108,"byte_end":109,"line_start":5,"line_end":5,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"use crate::models::{types::MtgFormat, user::User};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/models/deck.rs","byte_start":137,"byte_end":138,"line_start":5,"line_end":5,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"use crate::models::{types::MtgFormat, user::User};","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `user::User`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:5:39\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::models::{types::MtgFormat, user::User};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::schema::cards`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/deck_card.rs","byte_start":93,"byte_end":113,"line_start":5,"line_end":5,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use crate::schema::cards;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/deck_card.rs","byte_start":89,"byte_end":115,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::schema::cards;","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::schema::cards`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck_card.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::schema::cards;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `diesel::pg::Pg`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/types.rs","byte_start":4,"byte_end":18,"line_start":1,"line_end":1,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use diesel::pg::Pg;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/types.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::pg::Pg;","highlight_start":1,"highlight_end":20},{"text":"use diesel::sql_types::Text;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `diesel::pg::Pg`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/types.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::pg::Pg;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `diesel::sql_types::Text`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/types.rs","byte_start":24,"byte_end":47,"line_start":2,"line_end":2,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use diesel::sql_types::Text;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/types.rs","byte_start":20,"byte_end":49,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::sql_types::Text;","highlight_start":1,"highlight_end":29},{"text":"use diesel::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `diesel::sql_types::Text`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/types.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::sql_types::Text;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `AsExpression`, `FromSqlRow`, `FromSql`, `ToSql`, `self`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/types.rs","byte_start":81,"byte_end":85,"line_start":4,"line_end":4,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    deserialize::{self, FromSql},","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/models/types.rs","byte_start":87,"byte_end":94,"line_start":4,"line_end":4,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"    deserialize::{self, FromSql},","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/models/types.rs","byte_start":113,"byte_end":117,"line_start":5,"line_end":5,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"    serialize::{self, ToSql},","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/models/types.rs","byte_start":119,"byte_end":124,"line_start":5,"line_end":5,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"    serialize::{self, ToSql},","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/models/types.rs","byte_start":131,"byte_end":143,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    AsExpression, FromSqlRow,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/models/types.rs","byte_start":145,"byte_end":155,"line_start":6,"line_end":6,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"    AsExpression, FromSqlRow,","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/types.rs","byte_start":49,"byte_end":160,"line_start":3,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::{","highlight_start":1,"highlight_end":14},{"text":"    deserialize::{self, FromSql},","highlight_start":1,"highlight_end":34},{"text":"    serialize::{self, ToSql},","highlight_start":1,"highlight_end":30},{"text":"    AsExpression, FromSqlRow,","highlight_start":1,"highlight_end":30},{"text":"};","highlight_start":1,"highlight_end":3},{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AsExpression`, `FromSqlRow`, `FromSql`, `ToSql`, `self`, and `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/types.rs:4:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    deserialize::{self, FromSql},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serialize::{self, ToSql},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AsExpression, FromSqlRow,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `card::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/mod.rs","byte_start":179,"byte_end":186,"line_start":9,"line_end":9,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"pub use card::*;","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/mod.rs","byte_start":171,"byte_end":188,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use card::*;","highlight_start":1,"highlight_end":17},{"text":"pub use deck::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `card::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/mod.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use card::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `deck::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/mod.rs","byte_start":196,"byte_end":203,"line_start":10,"line_end":10,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"pub use deck::*;","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/mod.rs","byte_start":188,"byte_end":205,"line_start":10,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use deck::*;","highlight_start":1,"highlight_end":17},{"text":"pub use deck_card::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `deck::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/mod.rs:10:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use deck::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `deck_card::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/mod.rs","byte_start":213,"byte_end":225,"line_start":11,"line_end":11,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"pub use deck_card::*;","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/mod.rs","byte_start":205,"byte_end":227,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use deck_card::*;","highlight_start":1,"highlight_end":22},{"text":"pub use types::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `deck_card::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/mod.rs:11:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use deck_card::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `types::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/mod.rs","byte_start":235,"byte_end":243,"line_start":12,"line_end":12,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"pub use types::*;","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/mod.rs","byte_start":227,"byte_end":245,"line_start":12,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use types::*;","highlight_start":1,"highlight_end":18},{"text":"pub use user::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `types::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/mod.rs:12:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use types::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `user::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/models/mod.rs","byte_start":253,"byte_end":260,"line_start":13,"line_end":13,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"pub use user::*;","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/models/mod.rs","byte_start":245,"byte_end":262,"line_start":13,"line_end":13,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub use user::*;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `user::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/mod.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use user::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":473,"byte_end":482,"line_start":16,"line_end":16,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"    pub format: MtgFormat,","highlight_start":17,"highlight_end":26}],"label":"the trait `diesel::Queryable<diesel::sql_types::Text, Pg>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"double check your type mappings via the documentation of `diesel::sql_types::Text`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`diesel::sql_query` requires the loading target to column names for loading values.\nYou need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `diesel::Queryable<ST, DB>`:\n  `(T0, T1)` implements `diesel::Queryable<(ST0, ST1), __DB>`\n  `(T0, T1)` implements `diesel::Queryable<Record<(ST0, ST1)>, Pg>`\n  `(T0, T1, T2)` implements `diesel::Queryable<(ST0, ST1, ST2), __DB>`\n  `(T0, T1, T2)` implements `diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>`\n  `(T0, T1, T2, T3)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>`\n  `(T0, T1, T2, T3)` implements `diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>`\n  `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>`\n  `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>`\nand 126 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `MtgFormat` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:16:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub format: MtgFormat,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Queryable<diesel::sql_types::Text, Pg>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: double check your type mappings via the documentation of `diesel::sql_types::Text`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `diesel::sql_query` requires the loading target to column names for loading values.\u001b[0m\n\u001b[0m           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Queryable<ST, DB>`:\u001b[0m\n\u001b[0m             `(T0, T1)` implements `diesel::Queryable<(ST0, ST1), __DB>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `diesel::Queryable<Record<(ST0, ST1)>, Pg>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `diesel::Queryable<(ST0, ST1, ST2), __DB>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>`\u001b[0m\n\u001b[0m           and 126 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `MtgFormat` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(Option<Grouped<Eq<name, Bound<Text, String>>>>, Option<...>, ...)` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/scottyrayfermo/Documents/deck_builder/deck_builder_api/target/debug/deps/deck_builder_api-deac2b23d8d8a78e.long-type-2190392072226323745.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(Option<Grouped<Eq<name, Bound<Text, String>>>>, Option<...>, ...)` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/scottyrayfermo/Documents/deck_builder/deck_builder_api/target/debug/deps/deck_builder_api-deac2b23d8d8a78e.long-type-2190392072226323745.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":"the trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":912,"byte_end":923,"line_start":33,"line_end":33,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Debug, AsChangeset, Deserialize)]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":4379,"byte_end":4440,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  `&'a T` implements `AppearsOnTable<QS>`\n  `(T0, T1)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\nand 165 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(Option<Grouped<Eq<name, Bound<Text, &String>>>>, Option<...>, ...)` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/home/scottyrayfermo/Documents/deck_builder/deck_builder_api/target/debug/deps/deck_builder_api-deac2b23d8d8a78e.long-type-5951718125924735279.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: AppearsOnTable<decks::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, AsChangeset, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<decks::table>` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             `&'a T` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `AppearsOnTable<QS>`\u001b[0m\n\u001b[0m           and 165 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update MtgFormat` to implement `AppearsOnTable<decks::table>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<decks::columns::format, &'update MtgFormat>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(Option<Grouped<Eq<name, Bound<Text, &String>>>>, Option<...>, ...)` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/home/scottyrayfermo/Documents/deck_builder/deck_builder_api/target/debug/deps/deck_builder_api-deac2b23d8d8a78e.long-type-5951718125924735279.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":650,"byte_end":660,"line_start":23,"line_end":23,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"#[derive(Debug, Insertable, Deserialize)]","highlight_start":17,"highlight_end":27}],"label":"the trait `diesel::Expression` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":650,"byte_end":660,"line_start":23,"line_end":23,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"#[derive(Debug, Insertable, Deserialize)]","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":16851,"byte_end":16910,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  AliasedField<S, C>\n  Box<T>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>\n  CountDistinct<T, E>\n  CountStar\nand 133 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `MtgFormat` to implement `AsExpression<diesel::sql_types::Text>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Insertable, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             AliasedField<S, C>\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>\u001b[0m\n\u001b[0m             CountDistinct<T, E>\u001b[0m\n\u001b[0m             CountStar\u001b[0m\n\u001b[0m           and 133 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `MtgFormat` to implement `AsExpression<diesel::sql_types::Text>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `MtgFormat: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models/deck.rs","byte_start":650,"byte_end":660,"line_start":23,"line_end":23,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"#[derive(Debug, Insertable, Deserialize)]","highlight_start":17,"highlight_end":27}],"label":"the trait `diesel::Expression` is not implemented for `MtgFormat`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models/deck.rs","byte_start":650,"byte_end":660,"line_start":23,"line_end":23,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"#[derive(Debug, Insertable, Deserialize)]","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/home/scottyrayfermo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel_derives-2.2.7/src/lib.rs","byte_start":16851,"byte_end":16910,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &T\n  AliasedField<S, C>\n  Box<T>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>\n  CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>\n  CountDistinct<T, E>\n  CountStar\nand 133 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert MtgFormat` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert MtgFormat` to implement `AsExpression<diesel::sql_types::Text>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `MtgFormat: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models/deck.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Insertable, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `MtgFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &T\u001b[0m\n\u001b[0m             AliasedField<S, C>\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>\u001b[0m\n\u001b[0m             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>\u001b[0m\n\u001b[0m             CountDistinct<T, E>\u001b[0m\n\u001b[0m             CountStar\u001b[0m\n\u001b[0m           and 133 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert MtgFormat` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert MtgFormat` to implement `AsExpression<diesel::sql_types::Text>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 14 previous errors; 10 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 14 previous errors; 10 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
