---
description: Tracks User's Rust/web development learning progress across confidence levels with neural pathway mapping for AI teaching optimization
alwaysApply: true
---

**Note**: Confidence thresholds raised to realistic standards. CONFIDENT = Could teach others without hesitation. DEVELOPING = Successfully implemented but still learning. LEARNING = Recently introduced, needs guidance.

## CONFIDENT - Foundational Knowledge (Truly Solid)

### Core Rust Fundamentals
- **Basic Syntax**: Ownership, borrowing, basic pattern matching, error handling with Result
- **Type System**: Understanding of structs, enums, traits, basic generics
- **Memory Safety**: Conceptual understanding of Rust's ownership model
- **Module System**: Basic use of mod, pub, use statements for code organization

### Basic Development Workflow
- **Cargo Basics**: Creating projects, running tests, managing dependencies
- **Environment Setup**: .env files, basic configuration patterns
- **Debugging Approach**: Using println!, investigating compiler errors, reading documentation

---

## DEVELOPING - Active Implementation (Working But Learning)

### Configuration & Architecture Patterns
- **Dependency Injection**: Successfully implemented AppState pattern with Axum State extraction
- **Configuration Management**: Production-ready config loading at startup vs runtime env reads
- **Performance Optimization**: Identified and resolved repeated file system access inefficiencies
- **Testable Architecture**: Designed pure functions vs environment-coupled functions

### Axum Web Framework  
- **State Extraction**: Confidently uses `State<AppState>` pattern across multiple handlers
- **Handler Architecture**: Solid understanding of handler organization and parameter extraction
- **Error Responses**: Proficient with `StatusCode` mapping and `Result<Json<Value>, StatusCode>`
- **Module Architecture**: Strong separation of concerns, domain-driven organization
- **Routing**: Confident with nested routes and handler organization patterns
- **JWT Middleware**: Strong implementation of custom extractors with FromRequestParts trait
- **HTTP Authentication Flow**: Confident with header parsing, Bearer token extraction, validation integration
- **Declarative Security**: Solid understanding of type-driven authentication patterns

### JWT & Authentication Flow
- **JWT Implementation**: Complete token generation/validation with custom configuration
- **Password Security**: Solid argon2 hashing implementation and verification
- **HTTP Auth Flow**: Registration → Login → Token generation fully implemented
- **Error Architecture**: Advanced two-tier logging strategy (user-facing + internal)
- **Input Validation**: ID range validation, email normalization, comprehensive error handling
- **Custom Extractors**: Production-ready FromRequestParts implementation with proper error semantics
- **Route Protection**: Confident with declarative authentication through handler type signatures

### Error Handling Patterns
- **Custom Error Types**: Advanced `thiserror` usage with `JwtGenerationError`, `JwtValidationError`
- **Pattern Matching**: Confident enum destructuring and error type handling
- **HTTP Status Mapping**: Proficient mapping business logic errors to appropriate status codes
- **Testing Error Scenarios**: Comprehensive edge case and failure scenario validation

### Testing Architecture
- **Test Organization**: Clean categorization of test functions by concern
- **Edge Case Testing**: Thorough validation of error conditions and boundary cases
- **Environment Testing Challenges**: Understanding of environment coupling vs testable design
- **Comprehensive Coverage**: Success/failure scenarios, normalization, validation testing

### Diesel ORM Patterns
- **Connection Pooling Implementation**: Solid understanding, r2d2 integration complete
- **Query Building**: `.filter()`, `.select()` - knows patterns, syntax improving
- **Foreign Key Queries**: `decks::user_id.eq(value)` vs `user_id.eq(value)` - solid understanding
- **Schema Usage**: Comfortable using schema for Diesel operations
- **Mutable Connections**: Confident with requirement and patterns

---

## LEARNING - Recently Introduced (Needs Guidance)

### Advanced Axum Concepts
- **Route Security**: User isolation patterns and protected endpoint implementation - next learning target
- **Custom Extractors**: Advanced patterns beyond basic JWT authentication
- **Advanced Middleware**: Layered middleware composition patterns

### Database Relationships
- **Foreign Keys**: Solid understanding of `#[diesel(belongs_to(...))]` relationships
- **Custom Types**: Good grasp of enum-to-SQL conversion with `ToSql`/`FromSql` implementation  
- **Complex Queries**: Joins between multiple tables - conceptually strong, syntax developing

### Advanced Database Operations
- **Transactions**: Conceptual understanding, implementation syntax developing
- **Connection Management**: Strong connection lifecycle pattern understanding
- **Performance Optimization**: Query optimization awareness, connection pool tuning experience

### Async Rust
- **Async Basics**: Improving async/await pattern usage
- **Tokio Runtime**: Basic implementation understanding, practical usage developing

### External API Integration
- **HTTP Client Setup**: `reqwest` crate integration with proper headers and error handling
- **JSON Processing**: `serde_json` parsing and pretty-printing for response analysis
- **API Research Methodology**: Comprehensive endpoint analysis and field mapping strategies
- **Struct Mapping**: Successfully implemented complex JSON deserialization to custom Rust structs
- **Iterative Development**: Strategic field management for incremental feature implementation

---

## UNEXPLORED - Future Learning Areas

### API Design
- **Pagination**: Large dataset handling, cursor-based pagination
- **Rate Limiting**: Request throttling, abuse prevention
- **API Versioning**: Backward compatibility, version management

### MTG-Specific Business Logic
- **Format Validation**: Standard/Modern legality checking
- **Deck Rules**: 60-card minimums, 4-card limits, sideboard rules
- **Card Data Integration**: Scryfall API, image handling, card caching

### Performance & Scaling
- **Database Optimization**: Query performance, indexing strategy
- **Connection Tuning**: Pool size optimization, connection lifecycle
- **Caching**: Redis integration, query result caching

### Advanced Rust Patterns
- **Async Streaming**: Large dataset handling, async iterators
- **Error Propagation**: Advanced error handling, error context
- **Type-Level Programming**: Advanced traits, generic constraints

---

## Learning Neural Network Patterns

### Strengths (Strong Neural Pathways)
- **Systems Thinking**: Excellent at understanding WHY architectures work - demonstrated with config pattern
- **Performance Analysis**: Connects architecture decisions to efficiency concerns (env reads → startup config)
- **Conceptual Grasp**: Strong pattern recognition, successfully applied dependency injection concepts
- **Debugging Mindset**: Investigates unusual behavior, validates assumptions, thorough testing approach
- **Quality Focus**: Comprehensive test coverage, considers edge cases and failure scenarios
- **Architectural Evolution**: Successfully refactored from prototype to production patterns
- **Honest Assessment**: Openly acknowledges knowledge gaps, asks clarifying questions

### Growth Areas (Developing Pathways)  
- **Advanced Middleware**: Ready for JWT middleware implementation, concepts understood
- **Complex Query Syntax**: Strong conceptual understanding, syntax practice continues
- **Async Programming**: Improving async/await patterns, practical experience growing

### Recent Neural Connection Strengthening
- **Configuration Patterns**: New strong pathway - dependency injection, AppState, State extraction
- **Testing Architecture**: Strengthened pathway - organized test suites, comprehensive coverage
- **Performance Optimization**: New connection - architecture decisions → performance implications
- **Production Patterns**: Evolved from learning to implementing professional-grade solutions
- **JWT Middleware Patterns**: Strong pathway - manual implementation → structured approach → quiz validation (5/5)
- **HTTP Authentication Semantics**: Strong pathway - 400 vs 401 distinctions, proper error responses, validated understanding
- **Declarative Security**: Strong pathway - type system enforcement, "rusty" philosophy connection validated
- **Authentication Flow**: Solidified pathway - request → validation → handler passing, complete understanding demonstrated
- **Diesel Custom Types Foundation**: Understanding `FromSql<ST, Pg>` trait requirements; `ToSql<ST, Pg>` pattern with `Ok(IsNull::No)`
- **Scryfall Legalities Modeling**: Recognized open-ended `legalities` map; implemented `Legalities` with optional per-format fields and `LegalityKind` using serde `snake_case`
- **Color Modeling**: Chosen `enum Color` with `TryFrom<&str>`, `FromSql/ToSql<Text, Pg>`; JSON uses names, DB uses single-letter codes (W/U/B/R/G)
- **Diesel Array Types Understanding**: VarChar → Text migration for array compatibility; `Array<Nullable<Text>>` mapping to `Vec<Option<Color>>`
- **NewType Pattern Mastery**: Colors(Vec<Option<Color>>) wrapper to overcome orphan rule; complete understanding of orphan rule constraints
- **Advanced Lifetime Understanding**: Deep comprehension of temporary value drops, `'static` vs function lifetimes, borrowing vs ownership patterns
- **PostgreSQL Array Serialization**: Manual PostgreSQL array format writing (`{"W","U",NULL}`) due to Diesel's streaming architecture constraints
- **Container Transformations**: Strong grasp of `as_ref()`, `transpose()`, and iterator chain patterns for `Option`/`Result` dancing
- **Type System Mastery**: Trait disambiguation with `<Type as Trait>::method()`, complex iterator type resolution, debugging persistence

### Optimal Neural Connection Strategy
- **Research Guidance**: Point to specific docs/patterns, let him implement and build connections
- **Connect to Strong Nodes**: Reference confident areas when introducing new concepts
- **Explain WHY**: Always provide reasoning behind architectural decisions to strengthen pathways
- **Component-by-Component**: Break complex features into digestible pieces that connect to existing knowledge
- **Let Him Debug**: Guide investigation rather than providing direct answers to strengthen problem-solving pathways

---

## Quiz Performance Neural Mapping

### Recent Performance Patterns
- **Module Organization**: 100% - Strong neural pathways for separation of concerns
- **Type Safety**: 95% - Excellent connections to Rust type system benefits
- **Diesel Basics**: 85% - Good conceptual pathways, syntax connections developing
- **Database Relationships**: 95% - Strong understanding of foreign keys and joins conceptually
- **JWT Middleware & Auth**: 100% - Complete understanding validated, ready for implementation
- **Implementation Details**: 70% - Conceptual pathways strong, practical implementation connections need strengthening

### Learning Pattern Recognition
- **Conceptual First**: Builds understanding frameworks before diving into syntax
- **Honest Uncertainty**: Clearly distinguishes between confident knowledge and areas of uncertainty
- **Self-Correction**: Strong self-monitoring, catches and corrects reasoning
- **Practical Application**: Connects abstract concepts to concrete project use cases

---

## Update Instructions for Future AIs

### When to Update This Neural Map
- After major concept breakthroughs or solidification
- Following quiz administration and performance analysis
- When User demonstrates confident understanding of a developing concept
- When new knowledge gaps are identified
- After significant implementation achievements that strengthen neural pathways

### How to Update Neural Connections
- **Move concepts** between CONFIDENT ↔ DEVELOPING ↔ LEARNING ↔ UNEXPLORED (with HIGHER bar for CONFIDENT)
- **Add specific patterns** he's learned or struggling with
- **Update performance insights** with learning trend analysis
- **Note teaching approaches** that strengthen or weaken neural connections
- **Record new learning preferences** or successful connection strategies

### Use This Neural Map To
- **Design targeted quizzes** based on current knowledge state and connection strength
- **Choose appropriate complexity** level that builds on strong neural nodes
- **Identify knowledge gaps** that need bridging to existing strong areas
- **Connect new concepts** to his confident knowledge for faster learning
- **Adjust support level** based on pathway strength in each area

---

**Last Updated**: After completing Colors FromSql/ToSql implementation with advanced lifetime understanding and PostgreSQL array serialization mastery - demonstrating persistence through complex type system challenges and Diesel architecture constraints

**Next Neural Connection Point**: Card model integration with expanded fields, bulk data seeding, and practical testing of the Colors implementation